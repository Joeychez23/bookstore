[{"/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/index.js":"1","/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/App.js":"2","/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/components/Navbar.js":"3","/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/pages/SavedBooks.js":"4","/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/pages/SearchBooks.js":"5","/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/components/SignupForm.js":"6","/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/components/LoginForm.js":"7","/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/utils/auth.js":"8","/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/utils/API.js":"9","/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/utils/localStorage.js":"10","/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/utils/queries.js":"11","/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/utils/mutations.js":"12"},{"size":266,"mtime":1673475836404,"results":"13","hashOfConfig":"14"},{"size":1717,"mtime":1673643406589,"results":"15","hashOfConfig":"14"},{"size":2542,"mtime":1673645265240,"results":"16","hashOfConfig":"14"},{"size":3004,"mtime":1673647406636,"results":"17","hashOfConfig":"14"},{"size":5816,"mtime":1673646553275,"results":"18","hashOfConfig":"14"},{"size":3295,"mtime":1673648688526,"results":"19","hashOfConfig":"14"},{"size":2646,"mtime":1673648236370,"results":"20","hashOfConfig":"14"},{"size":1234,"mtime":1673475836405,"results":"21","hashOfConfig":"14"},{"size":1392,"mtime":1673475836405,"results":"22","hashOfConfig":"14"},{"size":793,"mtime":1673475836405,"results":"23","hashOfConfig":"14"},{"size":267,"mtime":1673558172150,"results":"24","hashOfConfig":"14"},{"size":1066,"mtime":1673648371368,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"9pfv1g",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":2,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/index.js",[],["55","56"],"/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/App.js",[],"/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/components/Navbar.js",[],"/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/pages/SavedBooks.js",["57","58","59","60"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { Navigate, useParams } from 'react-router-dom';\nimport { QUERY_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport { useMutation, useQuery } from '@apollo/client';\n//import { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n\n  const { loading, data } = useQuery(QUERY_ME)\n\n  const [rmBook] = useMutation(REMOVE_BOOK);\n\n  let userData;\n\n  if (data ? true : false) {\n    userData = data?.me || {};\n  }\n\n\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  if (!userData?.username) {\n    return (\n      <h4>\n        You need to be logged in to see this. Use the navigation links above to\n        sign up or log in!\n      </h4>\n    );\n  }\n\n\n\n  const handleDeleteBook = async (bookId) => {\n\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await rmBook({\n        variables: { bookId: bookId },\n        update: cache => {\n          const {me} = cache.readQuery({ query: QUERY_ME });\n          const userDataCache = me;\n          const savedBooksCache = userDataCache.savedBooks;\n          const updatedBookCache = savedBooksCache.filter((book) => book.bookId !== bookId);\n          cache.writeQuery({ query: QUERY_ME , data: { me: { ...me, savedBooks: [...updatedBookCache] } } })\n        }\n      })\n      removeBookId(bookId)\n    }\n\n    catch (err) {\n      console.log(err)\n    }\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n\n/*                 <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\nDelete this Book!\n</Button>*/","/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/pages/SearchBooks.js",["61","62","63","64","65","66","67","68"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { ADD_BOOK } from '../utils/mutations';\nimport { QUERY_ME } from '../utils/queries';\n\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [addBook] = useMutation(ADD_BOOK)\n\n  const { loading, data } = useQuery(QUERY_ME)\n\n  let bookIdArr = new Array;\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    if (data ? true : false) {\n      const userData = data?.me || [];\n      for (let i = 0; i < userData.savedBooks.length; i++) {\n        bookIdArr[bookIdArr.length] = userData.savedBooks[i].bookId\n      }\n    }\n    saveBookIds(bookIdArr)\n    setSavedBookIds(bookIdArr)\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    bookIdArr = new Array;\n    if (data ? true : false) {\n      const userData = data?.me || [];\n      for (let i = 0; i < userData.savedBooks.length; i++) {\n        bookIdArr[bookIdArr.length] = userData.savedBooks[i].bookId\n      }\n      //console.log(data)\n      saveBookIds(bookIdArr)\n    }\n\n    //console.log(bookIdArr)\n    let repeat = false;\n    for (let i = 0; i < bookIdArr.length; i++) {\n      if (bookIdArr[i] == bookToSave.bookId) {\n        repeat = true;\n      }\n    }\n\n\n    //console.log(repeat)\n    //console.log(savedBookIds)\n    console.log(bookToSave)\n    if (repeat != true) {\n      try {\n        await addBook({\n          variables: { book: bookToSave },\n          update: cache => {\n            const { me } = cache.readQuery({ query: QUERY_ME });\n            // console.log(me)\n            bookToSave.link = '/'\n            cache.writeQuery({ query: QUERY_ME, data: { me: { ...me, savedBooks: [...me.savedBooks, bookToSave] } } })\n          }\n        })\n        // if book successfully saves to user's account, save book id to state\n        setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n        saveBookIds(savedBookIds)\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/components/SignupForm.js",["69","70"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { createUser } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [createUser] = useMutation(ADD_USER)\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const {data} = await createUser({\n        variables: {...userFormData}\n      })\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/components/LoginForm.js",["71","72"],"// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\nimport { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [loginUser] = useMutation(LOGIN_USER)\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await loginUser({\n        variables: {...userFormData}\n      })\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/utils/auth.js",[],"/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/utils/API.js",[],"/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/utils/localStorage.js",[],"/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/utils/queries.js",[],"/Users/josephsanchez/Desktop/TimeLost/Bootcamp/bookstore/client/src/utils/mutations.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":25},{"ruleId":"77","severity":1,"message":"81","line":1,"column":27,"nodeType":"79","messageId":"80","endLine":1,"endColumn":36},{"ruleId":"77","severity":1,"message":"82","line":3,"column":10,"nodeType":"79","messageId":"80","endLine":3,"endColumn":18},{"ruleId":"77","severity":1,"message":"83","line":3,"column":20,"nodeType":"79","messageId":"80","endLine":3,"endColumn":29},{"ruleId":"77","severity":1,"message":"81","line":1,"column":27,"nodeType":"79","messageId":"80","endLine":1,"endColumn":36},{"ruleId":"77","severity":1,"message":"84","line":22,"column":11,"nodeType":"79","messageId":"80","endLine":22,"endColumn":18},{"ruleId":"85","severity":1,"message":"86","line":24,"column":19,"nodeType":"87","messageId":"88","endLine":24,"endColumn":28,"fix":"89"},{"ruleId":"90","severity":1,"message":"91","line":24,"column":19,"nodeType":"87","messageId":"92","endLine":24,"endColumn":28},{"ruleId":"85","severity":1,"message":"86","line":78,"column":17,"nodeType":"87","messageId":"88","endLine":78,"endColumn":26,"fix":"93"},{"ruleId":"90","severity":1,"message":"91","line":78,"column":17,"nodeType":"87","messageId":"92","endLine":78,"endColumn":26},{"ruleId":"94","severity":1,"message":"95","line":91,"column":24,"nodeType":"96","messageId":"97","endLine":91,"endColumn":26},{"ruleId":"94","severity":1,"message":"98","line":100,"column":16,"nodeType":"96","messageId":"97","endLine":100,"endColumn":18},{"ruleId":"77","severity":1,"message":"99","line":3,"column":23,"nodeType":"79","messageId":"80","endLine":3,"endColumn":31},{"ruleId":"77","severity":1,"message":"100","line":4,"column":10,"nodeType":"79","messageId":"80","endLine":4,"endColumn":20},{"ruleId":"77","severity":1,"message":"99","line":4,"column":23,"nodeType":"79","messageId":"80","endLine":4,"endColumn":31},{"ruleId":"77","severity":1,"message":"101","line":6,"column":10,"nodeType":"79","messageId":"80","endLine":6,"endColumn":19},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Navigate' is defined but never used.","'useParams' is defined but never used.","'loading' is assigned a value but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"104","text":"105"},"no-array-constructor","The array literal notation [] is preferable.","preferLiteral",{"range":"106","text":"105"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'useQuery' is defined but never used.","'createUser' is defined but never used.","'loginUser' is defined but never used.","no-global-assign","no-unsafe-negation",[934,934],"()",[2423,2423]]